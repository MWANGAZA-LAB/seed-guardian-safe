name: Full Stack Deployment

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'supabase/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Validate Supabase configuration
        run: |
          if [ -d "supabase" ]; then
            echo "✅ Supabase directory found"
            ls -la supabase/
          else
            echo "❌ Supabase directory not found"
            exit 1
          fi

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
        
      - name: Set project reference
        id: set-project-ref
        run: |
          echo "project_ref=${{ secrets.SUPABASE_PROJECT_REF }}" >> $GITHUB_OUTPUT
          if [ "${{ github.event.inputs.environment }}" = "staging" ] || [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi
        
      - name: Link to Supabase project
        run: supabase link --project-ref ${{ steps.set-project-ref.outputs.project_ref }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Deploy database migrations
        run: supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Deploy Edge Functions
        run: supabase functions deploy
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Set backend URL
        id: backend-url
        run: |
          echo "url=https://${{ steps.set-project-ref.outputs.project_ref }}.supabase.co" >> $GITHUB_OUTPUT

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [validate, deploy-backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ needs.deploy-backend.outputs.backend-url }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 30

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: build-frontend
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
          
      - name: Get deployment URL
        id: deployment-url
        run: |
          echo "url=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_OUTPUT

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Status:** ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Status:** ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend URL:** ${{ needs.deploy-backend.outputs.backend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ needs.deploy-frontend.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for more details."
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Full stack deployment completed successfully!"
          echo "🌐 Frontend: ${{ needs.deploy-frontend.outputs.deployment-url }}"
          echo "🔧 Backend: ${{ needs.deploy-backend.outputs.backend-url }}"
